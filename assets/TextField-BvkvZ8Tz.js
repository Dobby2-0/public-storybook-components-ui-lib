import{j as a}from"./jsx-runtime-DR9Q75dM.js";import{c as u}from"./index-DbF_LCtC.js";import{q as w}from"./Info-CwC22AGT.js";import{i as T,j as N,k as C,l as H,c as P,t as F,u as L,v as R,p as D,w as A,a as v}from"./useFocusRing-CTUx4aJi.js";import{$ as W,a as U,b as j}from"./Input-uOxCkvBD.js";import{a as z,b as _,c as O}from"./FieldError-CspgiTC-.js";import{a as B,b as k}from"./Text-CrGTCES4.js";import{r,R as b}from"./index-DRjF_FHU.js";import{b as K}from"./Form-DBrwXylw.js";const V=r.createContext({});let G=e=>{let{onHoverStart:t,onHoverChange:n,onHoverEnd:i,...l}=e;return l};function J(e,t){[e,t]=T(e,t,V);let{hoverProps:n,isHovered:i}=N(e),{isFocused:l,isFocusVisible:o,focusProps:d}=C({isTextInput:!0,autoFocus:e.autoFocus}),s=!!e["aria-invalid"]&&e["aria-invalid"]!=="false",p=H({...e,values:{isHovered:i,isFocused:l,isFocusVisible:o,isDisabled:e.disabled||!1,isInvalid:s},defaultClassName:"react-aria-TextArea"});return b.createElement("textarea",{...P(G(e),d,n),...p,ref:t,"data-focused":l||void 0,"data-disabled":e.disabled||void 0,"data-hovered":i||void 0,"data-focus-visible":o||void 0,"data-invalid":s||void 0})}const Q=r.forwardRef(J),X=r.createContext(null);function Y(e,t){[e,t]=T(e,t,X);let{validationBehavior:n}=F(K)||{};var i,l;let o=(l=(i=e.validationBehavior)!==null&&i!==void 0?i:n)!==null&&l!==void 0?l:"native",d=r.useRef(null),[s,p]=L(),[c,m]=r.useState("input"),{labelProps:M,inputProps:y,descriptionProps:S,errorMessageProps:I,...f}=W({...R(e),inputElementType:c,label:p,validationBehavior:o},d),x=r.useCallback(h=>{d.current=h,h&&m(h instanceof HTMLTextAreaElement?"textarea":"input")},[]),g=H({...e,values:{isDisabled:e.isDisabled||!1,isInvalid:f.isInvalid,isReadOnly:e.isReadOnly||!1,isRequired:e.isRequired||!1},defaultClassName:"react-aria-TextField"}),$=D(e);return delete $.id,b.createElement("div",{...$,...g,ref:t,slot:e.slot||void 0,"data-disabled":e.isDisabled||void 0,"data-invalid":f.isInvalid||void 0,"data-readonly":e.isReadOnly||void 0,"data-required":e.isRequired||void 0},b.createElement(A,{values:[[z,{...M,ref:s}],[U,{...y,ref:x}],[V,{...y,ref:x}],[B,{slots:{description:S,errorMessage:I}}],[_,f]]},g.children))}const Z=r.forwardRef(Y),ee=Z,E=u("w-full bg-control text-neutral-800 dark:text-neutral-900","data-[disabled]:cursor-not-allowed data-[disabled]:opacity-100","has-[:focus]:outline-none has-[:focus]:ring-2 has-[:focus]:ring-ring has-[:focus]:ring-offset-2","focus-visible:outline-none"),te=({className:e,...t})=>a.jsx(j,{className:v(e,n=>u(E,n)),...t}),ae=({className:e,...t})=>a.jsx(Q,{className:v(e,n=>u(E,"min-h-[80px]",n)),...t}),q=({label:e,description:t,errorMessage:n,textArea:i=!1,placeholder:l,prefix:o,suffix:d,type:s,className:p,...c})=>a.jsxs(ee,{"aria-label":"textfield",className:v(p,m=>u("group flex flex-col gap-1.5",m)),...c,children:[e&&a.jsx(O,{className:u("text-sm font-medium leading-none text-neutral-800","group-data-[disabled]:cursor-not-allowed group-data-[disabled]:opacity-70","group-data-[invalid]:text-error-hover"),children:e}),a.jsx("div",{className:u("input flex items-center gap-2 w-full rounded-sm border border-neutral-200 bg-control text-neutral-800 dark:text-neutral-900 px-2.5 py-1 ring-offset-background placeholder:text-neutral-800 dark:placeholder:text-neutral-900","group-data-[disabled]:cursor-not-allowed group-data-[disabled]:opacity-50",!i&&"h-8 file:border-0 file:bg-transparent file:text-sm file:font-medium"),children:i?a.jsx(ae,{placeholder:l}):a.jsxs(a.Fragment,{children:[o,a.jsx(te,{placeholder:l,type:s}),d]})}),t&&a.jsxs("div",{className:"flex gap-1 items-center text-sm text-neutral-600",children:[a.jsx(w,{}),a.jsx(k,{slot:"description",children:t})]}),n&&a.jsx("p",{className:"text-sm text-error-foreground",children:n})]});try{q.displayName="TextField",q.__docgenInfo={description:"TextField is a component that allows users to enter text.",displayName:"TextField",props:{label:{defaultValue:null,description:"Label above the input",name:"label",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"Additional descriptive text shown below the input",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"Optional error message desplayed below the input and description",name:"errorMessage",required:!1,type:{name:"string"}},textArea:{defaultValue:{value:"false"},description:"If true, renders a textarea instead of an input",name:"textArea",required:!1,type:{name:"boolean"}},placeholder:{defaultValue:null,description:"Optional placeholder text",name:"placeholder",required:!1,type:{name:"string"}},prefix:{defaultValue:null,description:"Optional element added before the Textfield input",name:"prefix",required:!1,type:{name:"ReactNode"}},suffix:{defaultValue:null,description:"Optional element added after the Textfield input",name:"suffix",required:!1,type:{name:"ReactNode"}},isInvalid:{defaultValue:null,description:"Whether the value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},pattern:{defaultValue:null,description:"Regex pattern that the value of the input must match to be valid. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefpattern).",name:"pattern",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},inputMode:{defaultValue:null,description:"Hints at the type of data that might be entered by the user while editing the element or its contents. See [MDN](https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute).",name:"inputMode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"text"'},{value:'"none"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"numeric"'},{value:'"decimal"'}]}},"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"inline"'},{value:'"both"'}]}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-errormessage":{defaultValue:null,description:"Identifies the element that provides an error message for the object.",name:"aria-errormessage",required:!1,type:{name:"string"}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree"'}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onCopy:{defaultValue:null,description:"Handler that is called when the user copies text. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy).",name:"onCopy",required:!1,type:{name:"ClipboardEventHandler<HTMLInputElement>"}},onCut:{defaultValue:null,description:"Handler that is called when the user cuts text. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut).",name:"onCut",required:!1,type:{name:"ClipboardEventHandler<HTMLInputElement>"}},onPaste:{defaultValue:null,description:"Handler that is called when the user pastes text. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste).",name:"onPaste",required:!1,type:{name:"ClipboardEventHandler<HTMLInputElement>"}},onCompositionEnd:{defaultValue:null,description:"Handler that is called when a text composition system completes or cancels the current text composition session. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event).",name:"onCompositionEnd",required:!1,type:{name:"CompositionEventHandler<HTMLInputElement>"}},onCompositionStart:{defaultValue:null,description:"Handler that is called when a text composition system starts a new text composition session. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event).",name:"onCompositionStart",required:!1,type:{name:"CompositionEventHandler<HTMLInputElement>"}},onCompositionUpdate:{defaultValue:null,description:"Handler that is called when a new character is received in the current text composition session. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event).",name:"onCompositionUpdate",required:!1,type:{name:"CompositionEventHandler<HTMLInputElement>"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},onBeforeInput:{defaultValue:null,description:"Handler that is called when the input value is about to be modified. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event).",name:"onBeforeInput",required:!1,type:{name:"FormEventHandler<HTMLInputElement>"}},onInput:{defaultValue:null,description:"Handler that is called when the input value is modified. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event).",name:"onInput",required:!1,type:{name:"FormEventHandler<HTMLInputElement>"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onSelect:{defaultValue:null,description:"Handler that is called when text in the input is selected. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/select_event).",name:"onSelect",required:!1,type:{name:"ReactEventHandler<HTMLInputElement>"}},type:{defaultValue:null,description:"The type of input to render. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdeftype).",name:"type",required:!1,type:{name:'"search" | "text" | (string & {}) | "tel" | "url" | "email" | "password"'}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},maxLength:{defaultValue:null,description:"The maximum number of characters supported by the input. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefmaxlength).",name:"maxLength",required:!1,type:{name:"number"}},minLength:{defaultValue:null,description:"The minimum number of characters required by the input. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefminlength).",name:"minLength",required:!1,type:{name:"number"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: string) => true | ValidationError | null)"}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}},children:{defaultValue:null,description:"The children of the component. A function may be provided to alter the children based on component state.",name:"children",required:!1,type:{name:"ReactNode | ((values: TextFieldRenderProps & { defaultChildren: ReactNode; }) => ReactNode)"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: TextFieldRenderProps & { defaultClassName: string; }) => string)"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: TextFieldRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}}}}}catch{}export{q as T};
