import{j as e}from"./jsx-runtime-DR9Q75dM.js";import{P as A}from"./Pill-ByEbGEhU.js";import{L as $}from"./ListBox-DLnjnFjF.js";import{a as z}from"./Popover-xe9GNMkb.js";import{d as U}from"./variants-CuMcQlp7.js";import{c as x,r as O,b as G}from"./index-By-mRCMU.js";import{s as J}from"./KeyboardArrowDown-Dio4eISq.js";import{d as Q,e as X}from"./Dialog-CgYtMAXa.js";import{r as n}from"./index-DRjF_FHU.js";import{$ as Y}from"./Button-BmI6QyOV.js";import{a as j}from"./useFocusRing-BWUU1kMe.js";import{L as E,D as k}from"./Label-C3T7MHLE.js";import{q as B}from"./Info-CwC22AGT.js";import{a as C}from"./Text-CYCjNin1.js";const q=n.forwardRef(({className:t,children:a,...s},d)=>e.jsx(Y,{ref:d,className:j(t,i=>x("flex h-8 w-full items-center justify-between whitespace-nowrap rounded-sm border border-[--border-trigger] bg-[--bg-trigger] pl-2.5 pr-1 py-1 text-sm","data-[disabled]:cursor-not-allowed data-[disabled]:opacity-50","data-[focus-visible]:outline-none data-[focus-visible]:ring-1 data-[focus-visible]:ring-ring","focus-visible:outline-none",i)),...s,children:j(a,i=>e.jsxs(e.Fragment,{children:[i,e.jsx("div",{className:"flex items-center justify-center ml-2 size-6 rounded-sm bg-transparent group-data-[open]:bg-secondary-focus",children:e.jsx(J,{"aria-hidden":"true",className:"size-[1.125rem] fill-[--fill-arrow]"})})]}))}));q.displayName="SelectTrigger";const L=({label:t,showLabelAsPlaceholder:a,className:s,children:d})=>e.jsxs("div",{className:"flex items-center gap-2",children:[e.jsx("span",{className:x("shrink line-clamp-1 text-[--text] data-[placeholder]:text-[--placeholder] font-[--font-weight]","[&>[slot=description]]:hidden",a&&"text-[--placeholder]",s),children:t}),d]}),W=({className:t,children:a,...s})=>e.jsx(z,{className:j(t,d=>x("w-[var(--trigger-width)] bg-control text-foreground",d)),enableDialog:!1,...s,children:a}),H=({className:t,...a})=>e.jsx($,{className:j(t,s=>x("max-h-[inherit] [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]",s)),...a}),P=({className:t,triggerRef:a,variant:s,children:d})=>{const[i,u]=n.useState(null),y=n.useCallback(()=>{a.current&&u(a.current.offsetWidth+"px")},[a]);Q({ref:a,onResize:y});const p=n.useMemo(()=>({trigger:"Select",triggerRef:a,placement:"bottom start",style:{"--trigger-width":i}}),[a,i]);return e.jsx(X.Provider,{value:p,children:e.jsx("div",{"aria-label":"select",className:x(U({variant:s,className:t})),children:d})})};try{q.displayName="SelectTrigger",q.__docgenInfo={description:"",displayName:"SelectTrigger",props:{triggerRef:{defaultValue:null,description:"",name:"triggerRef",required:!0,type:{name:"RefObject<HTMLButtonElement>"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | ClassNameObject"}},variant:{defaultValue:null,description:"",name:"variant",required:!1,type:{name:'"default" | "borderless" | "contrast" | null'}}}}}catch{}const M=({label:t,placeholder:a,description:s,variant:d="default",className:i,items:u,disallowEmptySelection:y,selectedKeys:p,defaultSelectedKeys:b,disabledKeys:w,onSelectionChange:m,idResolver:f,...S})=>{const{children:I,labelResolver:v}=S,g=I?{children:I}:{labelResolver:v},[h,T]=n.useState(!1),V=n.useRef(null),[l,K]=n.useState(p??b??void 0),F=n.useCallback(o=>{T(o)},[]),c=n.useCallback(o=>{K(o==="all"?new Set(u.keys()):o);const R=u.filter(D=>o==="all"?!0:o.has(O(D,f)));m==null||m(R)},[f,u,m]),r=n.useMemo(()=>typeof i=="object"?i:{base:i},[i]);return e.jsxs(P,{triggerRef:V,variant:d,className:r==null?void 0:r.base,children:[t&&e.jsx(E,{children:t}),e.jsx(q,{ref:V,onPress:()=>T(!0),...S,children:e.jsx(L,{label:l!=null&&l.size&&t?t:a,showLabelAsPlaceholder:!(l!=null&&l.size),children:!!(l!=null&&l.size)&&e.jsx(A,{className:"shrink-0 bg-primary text-neutral dark:text-neutral-1000 h-5 min-w-5 px-0 justify-around",children:l==null?void 0:l.size})})}),s&&e.jsxs(k,{className:"flex gap-1 items-center",children:[e.jsx(B,{}),e.jsx(C,{slot:"description",children:s})]}),e.jsx(W,{triggerRef:V,isOpen:h,onOpenChange:F,className:r==null?void 0:r.popover,children:e.jsx(H,{items:u,idResolver:f,selectionMode:"multiple",selectedKeys:p??l,onSelectionChange:c,disallowEmptySelection:y,disabledKeys:w,className:r==null?void 0:r.listbox,...g})})]})};try{M.displayName="MultiSelect",M.__docgenInfo={description:"A select component that displays a collapsible list of options and allows a user to select one or more of them.\n\nBased on `React-aria-components`",displayName:"MultiSelect",props:{onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"((selectedItems: T[]) => void)"}},selectedKeys:{defaultValue:null,description:"The currently selected keys in the collection (controlled).",name:"selectedKeys",required:!1,type:{name:"Set<Key>"}},defaultSelectedKeys:{defaultValue:null,description:"The initial selected keys in the collection (uncontrolled).",name:"defaultSelectedKeys",required:!1,type:{name:"Set<Key>"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"string | ((validation: ValidationResult) => string)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | ClassNameObject"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},disallowEmptySelection:{defaultValue:null,description:"",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"The name of the input, used when submitting an HTML form.",name:"name",required:!1,type:{name:"string"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Temporary text that occupies the text input when it is empty.",name:"placeholder",required:!1,type:{name:"string"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the menu.",name:"defaultOpen",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"Method that is called when the open state of the menu changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: Key) => true | ValidationError | null)"}},selectedKey:{defaultValue:null,description:"The currently selected key in the collection (controlled).",name:"selectedKey",required:!1,type:{name:"Key | null"}},defaultSelectedKey:{defaultValue:null,description:"The initial selected key in the collection (uncontrolled).",name:"defaultSelectedKey",required:!1,type:{name:"Key"}},isOpen:{defaultValue:null,description:"Sets the open state of the menu.",name:"isOpen",required:!1,type:{name:"boolean"}},variant:{defaultValue:{value:"default"},description:"",name:"variant",required:!1,type:{name:'"default" | "borderless" | "contrast" | null'}},children:{defaultValue:null,description:"Function that will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.",name:"children",required:!1,type:{name:'ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},labelResolver:{defaultValue:null,description:`Field to use as the item label, defaults to result of the "itemId" resolution.<br/>
If a function is provided, it will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.`,name:"labelResolver",required:!1,type:{name:'string | number | symbol | ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},items:{defaultValue:null,description:"",name:"items",required:!0,type:{name:"T[]"}},idResolver:{defaultValue:null,description:`Field to use as the item id, defaults to "id".<br/>
If a function is provided, it will be called with an item as the first argument. It must return a string.`,name:"idResolver",required:!1,type:{name:"string | number | symbol | ResolverFunction<T, string>"}}}}}catch{}const N=({label:t,placeholder:a,description:s,variant:d="default",className:i,items:u,disallowEmptySelection:y,onSelectionChange:p,idResolver:b,...w})=>{const{children:m,labelResolver:f}=w,S=m?{children:m}:{labelResolver:f},[I,v]=n.useState(!1),g=n.useRef(null),[h,T]=n.useState(void 0),[V,l]=n.useState(),K=n.useCallback(r=>{v(r)},[]),F=n.useCallback(r=>{v(!1),T(r==="all"?new Set(u.keys()):r);const o=u.filter(R=>r==="all"?!0:r.has(O(R,b)));o.length?l(m?m(o[0],{}):f?G(o[0],{},f):O(o[0],"id")):l(void 0),p==null||p(o[0])},[m,b,u,f,p]),c=n.useMemo(()=>typeof i=="object"?i:{base:i},[i]);return e.jsxs(P,{triggerRef:g,variant:d,className:c==null?void 0:c.base,children:[t&&e.jsx(E,{children:t}),e.jsx(q,{ref:g,onPress:()=>v(!0),...w,children:e.jsx(L,{label:V??a,showLabelAsPlaceholder:!(h!=null&&h.size)})}),s&&e.jsxs(k,{className:"flex gap-1 items-center",children:[e.jsx(B,{}),e.jsx(C,{slot:"description",children:s})]}),e.jsx(W,{triggerRef:g,isOpen:I,onOpenChange:K,className:c==null?void 0:c.popover,children:e.jsx(H,{items:u,idResolver:b,selectionMode:"single",selectedKeys:h,disallowEmptySelection:y,onSelectionChange:F,className:c==null?void 0:c.listbox,...S})})]})};try{N.displayName="SingleSelect",N.__docgenInfo={description:"A select component that displays a collapsible list of options and allows a user to select one of them.\n\nBased on `React-aria-components`",displayName:"SingleSelect",props:{onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"((selectedItem: T) => void)"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"string | ((validation: ValidationResult) => string)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | ClassNameObject"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},disallowEmptySelection:{defaultValue:null,description:"",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"The name of the input, used when submitting an HTML form.",name:"name",required:!1,type:{name:"string"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Temporary text that occupies the text input when it is empty.",name:"placeholder",required:!1,type:{name:"string"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the menu.",name:"defaultOpen",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"Method that is called when the open state of the menu changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: Key) => true | ValidationError | null)"}},selectedKey:{defaultValue:null,description:"The currently selected key in the collection (controlled).",name:"selectedKey",required:!1,type:{name:"Key | null"}},defaultSelectedKey:{defaultValue:null,description:"The initial selected key in the collection (uncontrolled).",name:"defaultSelectedKey",required:!1,type:{name:"Key"}},isOpen:{defaultValue:null,description:"Sets the open state of the menu.",name:"isOpen",required:!1,type:{name:"boolean"}},variant:{defaultValue:{value:"default"},description:"",name:"variant",required:!1,type:{name:'"default" | "borderless" | "contrast" | null'}},children:{defaultValue:null,description:"Function that will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.",name:"children",required:!1,type:{name:'ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},labelResolver:{defaultValue:null,description:`Field to use as the item label, defaults to result of the "itemId" resolution.<br/>
If a function is provided, it will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.`,name:"labelResolver",required:!1,type:{name:'string | number | symbol | ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},items:{defaultValue:null,description:"",name:"items",required:!0,type:{name:"T[]"}},idResolver:{defaultValue:null,description:`Field to use as the item id, defaults to "id".<br/>
If a function is provided, it will be called with an item as the first argument. It must return a string.`,name:"idResolver",required:!1,type:{name:"string | number | symbol | ResolverFunction<T, string>"}}}}}catch{}const Z=t=>t.selectionMode==="multiple",_=t=>Z(t)?e.jsx(M,{...t}):e.jsx(N,{...t});try{_.displayName="Select",_.__docgenInfo={description:"A select component that displays a collapsible list of options and allows a user to select one of them.\n\nBased on `React-aria-components`",displayName:"Select",props:{selectionMode:{defaultValue:null,description:"",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}},onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"((selectedItem: T) => void) | ((selectedItems: T[]) => void)"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"string | ((validation: ValidationResult) => string)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | ClassNameObject"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},disallowEmptySelection:{defaultValue:null,description:"",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"The name of the input, used when submitting an HTML form.",name:"name",required:!1,type:{name:"string"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Temporary text that occupies the text input when it is empty.",name:"placeholder",required:!1,type:{name:"string"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the menu.",name:"defaultOpen",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"Method that is called when the open state of the menu changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: Key) => true | ValidationError | null)"}},selectedKey:{defaultValue:null,description:"The currently selected key in the collection (controlled).",name:"selectedKey",required:!1,type:{name:"Key | null"}},defaultSelectedKey:{defaultValue:null,description:"The initial selected key in the collection (uncontrolled).",name:"defaultSelectedKey",required:!1,type:{name:"Key"}},isOpen:{defaultValue:null,description:"Sets the open state of the menu.",name:"isOpen",required:!1,type:{name:"boolean"}},variant:{defaultValue:null,description:"",name:"variant",required:!1,type:{name:'"default" | "borderless" | "contrast" | null'}},children:{defaultValue:null,description:"Function that will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.",name:"children",required:!1,type:{name:'ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},labelResolver:{defaultValue:null,description:`Field to use as the item label, defaults to result of the "itemId" resolution.<br/>
If a function is provided, it will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.`,name:"labelResolver",required:!1,type:{name:'string | number | symbol | ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},items:{defaultValue:null,description:"",name:"items",required:!0,type:{name:"T[]"}},idResolver:{defaultValue:null,description:`Field to use as the item id, defaults to "id".<br/>
If a function is provided, it will be called with an item as the first argument. It must return a string.`,name:"idResolver",required:!1,type:{name:"string | number | symbol | ResolverFunction<T, string>"}},selectedKeys:{defaultValue:null,description:"The currently selected keys in the collection (controlled).",name:"selectedKeys",required:!1,type:{name:"Set<Key>"}},defaultSelectedKeys:{defaultValue:null,description:"The initial selected keys in the collection (uncontrolled).",name:"defaultSelectedKeys",required:!1,type:{name:"Set<Key>"}}}}}catch{}export{_ as S};
