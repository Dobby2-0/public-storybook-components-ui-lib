import{j as a}from"./jsx-runtime-DR9Q75dM.js";import{c}from"./index-By-mRCMU.js";import{r}from"./index-DRjF_FHU.js";import{a as g}from"./useFocusRing-DmDxhQCI.js";import{$ as y,a as b,b as w,c as x}from"./Dialog-DIaAfxUd.js";const q=x,f=({isOpen:e,onOpenChange:t,ref:i})=>{const[s,n]=r.useState(e);r.useEffect(()=>{n(e)},[e]);const o=r.useCallback(l=>{n(l),t==null||t(l)},[t]);return r.useImperativeHandle(i,()=>({open:()=>o(!0),close:()=>o(!1)}),[o]),[s,o]},d=r.forwardRef(({className:e,offset:t=6,enableDialog:i=!0,overlayArrow:s=!1,children:n,isOpen:o,onOpenChange:l,...u},p)=>{const[m,h]=f({isOpen:o,onOpenChange:l,ref:p});return a.jsxs(y,{isEntering:!0,offset:t,className:g(e,v=>c("group z-50 rounded-sm bg-info fill-info text-info-foreground outline-none","data-[entering]:animate-in data-[entering]:fade-in-0 data-[entering]:zoom-in-95","data-[exiting]:animate-out data-[exiting]:fade-out-0 data-[exiting]:zoom-out-95","data-[placement=bottom]:slide-in-from-top-2 data-[placement=left]:slide-in-from-right-2 data-[placement=right]:slide-in-from-left-2 data-[placement=top]:slide-in-from-bottom-2",v)),isOpen:m,onOpenChange:h,...u,children:[s&&a.jsx(b,{children:a.jsx("div",{className:c("group-data-[entering]:animate-in group-data-[entering]:fade-in-0 group-data-[entering]:zoom-in-0","group-data-[placement=top]:rotate-180 group-data-[placement=left]:rotate-90 group-data-[placement=right]:-rotate-90"),children:a.jsx("svg",{className:"fill-inherit",width:12,height:12,viewBox:"0 0 12 12",children:a.jsx("path",{d:"M0 12 L6 6 L12 12"})})})}),i?a.jsx(V,{children:n}):n]})});d.displayName="PopoverContent";const V=({className:e,...t})=>a.jsx(w,{className:c("p-1.5 outline outline-0",e),...t}),O=r.forwardRef(({className:e,content:t,offset:i=6,overlayArrow:s=!1,isOpen:n,onOpenChange:o,children:l,...u},p)=>{const[m,h]=f({isOpen:n,onOpenChange:o,ref:p});return a.jsxs(q,{isOpen:m,onOpenChange:h,children:[l,a.jsx(d,{offset:i,enableDialog:!0,overlayArrow:s,className:e,...u,children:t})]})});O.displayName="Popover";try{d.displayName="PopoverContent",d.__docgenInfo={description:"Popover component used to show an overlay relative to a trigger\n\nBased on `react-aria-components`",displayName:"PopoverContent",props:{content:{defaultValue:null,description:"Content to be displayed in the popover element",name:"content",required:!0,type:{name:"ReactNode"}},overlayArrow:{defaultValue:{value:"false"},description:"Should an arrow be added to the popover overlay pointing towards the trigger",name:"overlayArrow",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: PopoverRenderProps & { defaultClassName: string; }) => string)"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: PopoverRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}},offset:{defaultValue:{value:"6"},description:`The additional offset applied along the main axis between the element and its
anchor element.`,name:"offset",required:!1,type:{name:"number"}},defaultOpen:{defaultValue:null,description:"Whether the overlay is open by default (uncontrolled).",name:"defaultOpen",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"Handler that is called when the overlay's open state changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},isOpen:{defaultValue:null,description:"Whether the overlay is open by default (controlled).",name:"isOpen",required:!1,type:{name:"boolean"}},trigger:{defaultValue:null,description:"The name of the component that triggered the popover. This is reflected on the element\nas the `data-trigger` attribute, and can be used to provide specific\nstyles for the popover depending on which element triggered it.",name:"trigger",required:!1,type:{name:"string"}},shouldCloseOnInteractOutside:{defaultValue:null,description:`When user interacts with the argument element outside of the popover ref,
return true if onClose should be called. This gives you a chance to filter
out interaction with elements that should not dismiss the popover.
By default, onClose will always be called on interaction outside the popover ref.`,name:"shouldCloseOnInteractOutside",required:!1,type:{name:"((element: Element) => boolean)"}},isEntering:{defaultValue:null,description:"Whether the popover is currently performing an entry animation.",name:"isEntering",required:!1,type:{name:"boolean"}},isExiting:{defaultValue:null,description:"Whether the popover is currently performing an exit animation.",name:"isExiting",required:!1,type:{name:"boolean"}},UNSTABLE_portalContainer:{defaultValue:{value:"document.body"},description:"The container element in which the overlay portal will be placed. This may have unknown behavior depending on where it is portalled to.",name:"UNSTABLE_portalContainer",required:!1,type:{name:"Element"}},isKeyboardDismissDisabled:{defaultValue:{value:"false"},description:`Whether pressing the escape key to close the popover should be disabled.

Most popovers should not use this option. When set to true, an alternative
way to close the popover with a keyboard must be provided.`,name:"isKeyboardDismissDisabled",required:!1,type:{name:"boolean"}},placement:{defaultValue:{value:"'bottom'"},description:"The placement of the element with respect to its anchor element.",name:"placement",required:!1,type:{name:"enum",value:[{value:'"end"'},{value:'"start"'},{value:'"left"'},{value:'"right"'},{value:'"top"'},{value:'"bottom"'},{value:'"bottom left"'},{value:'"bottom right"'},{value:'"bottom start"'},{value:'"bottom end"'},{value:'"top left"'},{value:'"top right"'},{value:'"top start"'},{value:'"top end"'},{value:'"left top"'},{value:'"left bottom"'},{value:'"start top"'},{value:'"start bottom"'},{value:'"right top"'},{value:'"right bottom"'},{value:'"end top"'},{value:'"end bottom"'}]}},crossOffset:{defaultValue:{value:"0"},description:`The additional offset applied along the cross axis between the element and its
anchor element.`,name:"crossOffset",required:!1,type:{name:"number"}},shouldFlip:{defaultValue:{value:"true"},description:`Whether the element should flip its orientation (e.g. top to bottom or left to right) when
there is insufficient room for it to render completely.`,name:"shouldFlip",required:!1,type:{name:"boolean"}},triggerRef:{defaultValue:null,description:`The ref for the element which the popover positions itself with respect to.

When used within a trigger component such as DialogTrigger, MenuTrigger, Select, etc.,
this is set automatically. It is only required when used standalone.`,name:"triggerRef",required:!1,type:{name:"RefObject<Element | null>"}},boundaryElement:{defaultValue:{value:"document.body"},description:"Element that that serves as the positioning boundary.",name:"boundaryElement",required:!1,type:{name:"Element"}},scrollRef:{defaultValue:{value:"overlayRef"},description:"A ref for the scrollable region within the overlay.",name:"scrollRef",required:!1,type:{name:"RefObject<Element | null>"}},shouldUpdatePosition:{defaultValue:{value:"true"},description:"Whether the overlay should update its position automatically.",name:"shouldUpdatePosition",required:!1,type:{name:"boolean"}},maxHeight:{defaultValue:null,description:`The maxHeight specified for the overlay element.
By default, it will take all space up to the current viewport height.`,name:"maxHeight",required:!1,type:{name:"number"}},arrowBoundaryOffset:{defaultValue:{value:"0"},description:"The minimum distance the arrow's edge should be from the edge of the overlay element.",name:"arrowBoundaryOffset",required:!1,type:{name:"number"}},isNonModal:{defaultValue:null,description:`Whether the popover is non-modal, i.e. elements outside the popover may be
interacted with by assistive technologies.

Most popovers should not use this option as it may negatively impact the screen
reader experience. Only use with components such as combobox, which are designed
to handle this situation carefully.`,name:"isNonModal",required:!1,type:{name:"boolean"}}}}}catch{}export{O as P,d as a};
