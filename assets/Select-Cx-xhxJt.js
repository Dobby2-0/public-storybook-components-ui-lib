import{j as i}from"./jsx-runtime-DR9Q75dM.js";import{P as ie}from"./Pill-ByEbGEhU.js";import{L as re}from"./ListBox-BEdTQU3F.js";import{a as se}from"./Popover-CY1QRIMR.js";import{c as S,r as H}from"./index-By-mRCMU.js";import{s as oe}from"./KeyboardArrowDown-Dio4eISq.js";import{r as m,R as g}from"./index-DRjF_FHU.js";import{b as de,$ as ue}from"./Button-B8-bwU7B.js";import{p as k,c as O,e as ce,s as me,C as fe,i as _,t as L,k as pe,u as he,v as be,l as A,w as ye,a as D}from"./useFocusRing-DmDxhQCI.js";import{L as U,D as z}from"./Label-C3T7MHLE.js";import{$ as ve,a as ge,d as G}from"./variants-BQbvYIXS.js";import{q as J}from"./Info-CwC22AGT.js";import{d as xe,m as Q,j as Ve,n as X}from"./Dialog-DIaAfxUd.js";import{a as Y,b as Z}from"./Text-w-xymXK0.js";import{$ as qe,a as $e,b as we}from"./FieldError-CciZ9EgW.js";import{a as Ie,$ as Se,b as Fe}from"./Form-qpAKqtEj.js";import{$ as Re}from"./intlStrings-ZMTSFH_M.js";import{c as Pe,d as Te}from"./ListBox-DM1LzFJn.js";import{$ as Ke}from"./Collection-BXZCYl9S.js";import{$ as De,a as Be,b as je}from"./DragAndDrop-CF_SXvn4.js";import{$ as Ce}from"./useFormReset-B7wBBm0H.js";import{a as Ee}from"./VisuallyHidden-BC8uHK73.js";import{$ as Me}from"./useLocalizedStringFormatter-DDHaVjp6.js";const ee=new WeakMap;function ke(e,t,n){let{keyboardDelegate:s,isDisabled:a,isRequired:d,name:o,validationBehavior:l="aria"}=e,f=De({usage:"search",sensitivity:"base"}),u=m.useMemo(()=>s||new Be(t.collection,t.disabledKeys,n,f),[s,t.collection,t.disabledKeys,f]),{menuTriggerProps:p,menuProps:r}=ve({isDisabled:a,type:"listbox"},t,n),V=c=>{switch(c.key){case"ArrowLeft":{var $,w;c.preventDefault();let K=t.selectedKey!=null?($=u.getKeyAbove)===null||$===void 0?void 0:$.call(u,t.selectedKey):(w=u.getFirstKey)===null||w===void 0?void 0:w.call(u);K&&t.setSelectedKey(K);break}case"ArrowRight":{var j,C;c.preventDefault();let K=t.selectedKey!=null?(j=u.getKeyBelow)===null||j===void 0?void 0:j.call(u,t.selectedKey):(C=u.getFirstKey)===null||C===void 0?void 0:C.call(u);K&&t.setSelectedKey(K);break}}},{typeSelectProps:v}=je({keyboardDelegate:u,selectionManager:t.selectionManager,onTypeSelect(c){t.setSelectedKey(c)}}),{isInvalid:h,validationErrors:b,validationDetails:R}=t.displayValidation,{labelProps:F,fieldProps:I,descriptionProps:q,errorMessageProps:P}=qe({...e,labelElementType:"span",isInvalid:h,errorMessage:e.errorMessage||b});v.onKeyDown=v.onKeyDownCapture,delete v.onKeyDownCapture;let T=k(e,{labelable:!0}),x=O(v,p,I),y=ce();return ee.set(t,{isDisabled:a,isRequired:d,name:o,validationBehavior:l}),{labelProps:{...F,onClick:()=>{if(!e.isDisabled){var c;(c=n.current)===null||c===void 0||c.focus(),me("keyboard")}}},triggerProps:O(T,{...x,isDisabled:a,onKeyDown:fe(x.onKeyDown,V,e.onKeyDown),onKeyUp:e.onKeyUp,"aria-labelledby":[y,x["aria-labelledby"],x["aria-label"]&&!x["aria-labelledby"]?x.id:null].filter(Boolean).join(" "),onFocus(c){t.isFocused||(e.onFocus&&e.onFocus(c),e.onFocusChange&&e.onFocusChange(!0),t.setFocused(!0))},onBlur(c){t.isOpen||(e.onBlur&&e.onBlur(c),e.onFocusChange&&e.onFocusChange(!1),t.setFocused(!1))}}),valueProps:{id:y},menuProps:{...r,autoFocus:t.focusStrategy||!0,shouldSelectOnPressUp:!0,shouldFocusOnHover:!0,disallowEmptySelection:!0,linkBehavior:"selection",onBlur:c=>{c.currentTarget.contains(c.relatedTarget)||(e.onBlur&&e.onBlur(c),e.onFocusChange&&e.onFocusChange(!1),t.setFocused(!1))},"aria-labelledby":[I["aria-labelledby"],x["aria-label"]&&!I["aria-labelledby"]?x.id:null].filter(Boolean).join(" ")},descriptionProps:q,errorMessageProps:P,isInvalid:h,validationErrors:b,validationDetails:R}}function Ne(e,t,n){let s=ee.get(t)||{},{autoComplete:a,name:d=s.name,isDisabled:o=s.isDisabled}=e,{validationBehavior:l,isRequired:f}=s,{visuallyHiddenProps:u}=Ee();Ce(e.selectRef,t.selectedKey,t.setSelectedKey),Ie({validationBehavior:l,focus:()=>{var r;return(r=n.current)===null||r===void 0?void 0:r.focus()}},t,e.selectRef);var p;return{containerProps:{...u,"aria-hidden":!0,"data-react-aria-prevent-focus":!0,"data-a11y-ignore":"aria-hidden-focus"},inputProps:{style:{display:"none"}},selectProps:{tabIndex:-1,autoComplete:a,disabled:o,required:l==="native"&&f,name:d,value:(p=t.selectedKey)!==null&&p!==void 0?p:"",onChange:r=>t.setSelectedKey(r.target.value)}}}function Oe(e){let{state:t,triggerRef:n,label:s,name:a,isDisabled:d}=e,o=m.useRef(null),{containerProps:l,selectProps:f}=Ne({...e,selectRef:o},t,n);var u;return t.collection.size<=300?g.createElement("div",{...l,"data-testid":"hidden-select-container"},g.createElement("label",null,s,g.createElement("select",{...f,ref:o},g.createElement("option",null),[...t.collection.getKeys()].map(p=>{let r=t.collection.getItem(p);if(r&&r.type==="item")return g.createElement("option",{key:r.key,value:r.key},r.textValue)})))):a?g.createElement("input",{type:"hidden",autoComplete:f.autoComplete,name:a,disabled:d,value:(u=t.selectedKey)!==null&&u!==void 0?u:""}):null}function We(e){let t=xe(e),[n,s]=m.useState(null),a=ge({...e,onSelectionChange:f=>{e.onSelectionChange!=null&&e.onSelectionChange(f),t.close(),d.commitValidation()}}),d=Se({...e,value:a.selectedKey}),[o,l]=m.useState(!1);return{...d,...a,...t,focusStrategy:n,open(f=null){a.collection.size!==0&&(s(f),t.open())},toggle(f=null){a.collection.size!==0&&(s(f),t.toggle())},isFocused:o,setFocused:l}}function He(e){return e&&e.__esModule?e.default:e}const N=m.createContext(null),te=m.createContext(null);function _e(e,t){[e,t]=_(e,t,N);let{children:n,isDisabled:s=!1,isInvalid:a=!1,isRequired:d=!1}=e,o=m.useMemo(()=>typeof n=="function"?n({isOpen:!1,isDisabled:s,isInvalid:a,isRequired:d,isFocused:!1,isFocusVisible:!1,defaultChildren:null}):n,[n,s,a,d]);return g.createElement(Ke,{content:o},l=>g.createElement(Le,{props:e,collection:l,selectRef:t}))}function Le({props:e,selectRef:t,collection:n}){let{validationBehavior:s}=L(Fe)||{};var a,d;let o=(d=(a=e.validationBehavior)!==null&&a!==void 0?a:s)!==null&&d!==void 0?d:"native",l=We({...e,collection:n,children:void 0,validationBehavior:o}),{isFocusVisible:f,focusProps:u}=pe({within:!0}),p=m.useRef(null),[r,V]=he(),{labelProps:v,triggerProps:h,valueProps:b,menuProps:R,descriptionProps:F,errorMessageProps:I,...q}=ke({...be(e),label:V,validationBehavior:o},l,p),[P,T]=m.useState(null),x=m.useCallback(()=>{p.current&&T(p.current.offsetWidth+"px")},[p]);Q({ref:p,onResize:x});let y=m.useMemo(()=>({isOpen:l.isOpen,isFocused:l.isFocused,isFocusVisible:f,isDisabled:e.isDisabled||!1,isInvalid:q.isInvalid||!1,isRequired:e.isRequired||!1}),[l.isOpen,l.isFocused,f,e.isDisabled,q.isInvalid,e.isRequired]),c=A({...e,values:y,defaultClassName:"react-aria-Select"}),$=k(e);delete $.id;let w=m.useRef(null);return g.createElement(ye,{values:[[N,e],[te,l],[ae,b],[$e,{...v,ref:r,elementType:"span"}],[de,{...h,ref:p,isPressed:l.isOpen}],[Ve,l],[X,{trigger:"Select",triggerRef:p,scrollRef:w,placement:"bottom start",style:{"--trigger-width":P}}],[Pe,{...R,ref:w}],[Te,l],[Y,{slots:{description:F,errorMessage:I}}],[we,q]]},g.createElement("div",{...$,...c,...u,ref:t,slot:e.slot||void 0,"data-focused":l.isFocused||void 0,"data-focus-visible":f||void 0,"data-open":l.isOpen||void 0,"data-disabled":e.isDisabled||void 0,"data-invalid":q.isInvalid||void 0,"data-required":e.isRequired||void 0}),g.createElement(Oe,{state:l,triggerRef:p,label:V,name:e.name,isDisabled:e.isDisabled}))}const Ae=m.forwardRef(_e),ae=m.createContext(null);function Ue(e,t){var n,s;[e,t]=_(e,t,ae);let a=m.useContext(te),{placeholder:d}=L(N),o=a.selectedKey!=null?a.collection.getItem(a.selectedKey):null,l=o==null?void 0:o.props.children;typeof l=="function"&&(l=l({isHovered:!1,isPressed:!1,isSelected:!1,isFocused:!1,isFocusVisible:!1,isDisabled:!1,selectionMode:"single",selectionBehavior:"toggle"}));let f=Me(He(Re),"react-aria-components");var u,p,r;let V=A({...e,defaultChildren:(u=l??d)!==null&&u!==void 0?u:f.format("selectPlaceholder"),defaultClassName:"react-aria-SelectValue",values:{selectedItem:(p=(n=a.selectedItem)===null||n===void 0?void 0:n.value)!==null&&p!==void 0?p:null,selectedText:(r=(s=a.selectedItem)===null||s===void 0?void 0:s.textValue)!==null&&r!==void 0?r:null,isPlaceholder:!o}}),v=k(e);return g.createElement("span",{ref:t,...v,...V,"data-placeholder":!o||void 0},g.createElement(Y.Provider,{value:void 0},V.children))}const ze=m.forwardRef(Ue),B=m.forwardRef(({className:e,children:t,...n},s)=>i.jsx(ue,{ref:s,className:D(e,a=>S("flex h-8 w-full items-center justify-between whitespace-nowrap rounded-sm border border-[--border-trigger] bg-[--bg-trigger] pl-2.5 pr-1 py-1 text-sm","data-[disabled]:cursor-not-allowed data-[disabled]:opacity-50","data-[focus-visible]:outline-none data-[focus-visible]:ring-1 data-[focus-visible]:ring-ring","focus-visible:outline-none",a)),...n,children:D(t,a=>i.jsxs(i.Fragment,{children:[a,i.jsx("div",{className:"flex items-center justify-center ml-2 size-6 rounded-sm bg-transparent group-data-[open]:bg-secondary-focus",children:i.jsx(oe,{"aria-hidden":"true",className:"size-[1.125rem] fill-[--fill-arrow]"})})]}))}));B.displayName="SelectTrigger";const le=({className:e,children:t,...n})=>i.jsx(se,{className:D(e,s=>S("w-[var(--trigger-width)] bg-control text-foreground",s)),enableDialog:!1,...n,children:t}),ne=({className:e,...t})=>i.jsx(re,{className:D(e,n=>S("max-h-[inherit] [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]",n)),...t});try{B.displayName="SelectTrigger",B.__docgenInfo={description:"",displayName:"SelectTrigger",props:{slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: ListBoxRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}},autoFocus:{defaultValue:null,description:"Whether to auto focus the listbox or an option.",name:"autoFocus",required:!1,type:{name:"boolean | FocusStrategy"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: ListBoxRenderProps & { defaultClassName: string; }) => string)"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onScroll:{defaultValue:null,description:"Handler that is called when a user scrolls. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event).",name:"onScroll",required:!1,type:{name:"((e: UIEvent<HTMLDivElement, UIEvent>) => void)"}},orientation:{defaultValue:{value:"'vertical'"},description:`The primary orientation of the items. Usually this is the
direction that the collection scrolls.`,name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},items:{defaultValue:null,description:"Item objects in the collection.",name:"items",required:!1,type:{name:"Iterable<T> & T[]"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},dependencies:{defaultValue:null,description:"Values that should invalidate the item cache when using dynamic collections.",name:"dependencies",required:!1,type:{name:"any[]"}},onAction:{defaultValue:null,description:"Handler that is called when a user performs an action on an item. The exact user event depends on\nthe collection's `selectionBehavior` prop and the interaction modality.",name:"onAction",required:!1,type:{name:"((key: Key) => void)"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"((keys: Selection) => void)"}},disallowEmptySelection:{defaultValue:null,description:"Whether the collection allows empty selection.",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},shouldFocusWrap:{defaultValue:null,description:"Whether focus should wrap around when the end/start is reached.",name:"shouldFocusWrap",required:!1,type:{name:"boolean"}},selectionMode:{defaultValue:null,description:"The type of selection that is allowed in the collection.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'},{value:'"none"'}]}},selectedKeys:{defaultValue:null,description:"The currently selected keys in the collection (controlled).",name:"selectedKeys",required:!1,type:{name:'"all" | Iterable<Key>'}},defaultSelectedKeys:{defaultValue:null,description:"The initial selected keys in the collection (uncontrolled).",name:"defaultSelectedKeys",required:!1,type:{name:'"all" | Iterable<Key>'}},selectionBehavior:{defaultValue:null,description:"How multiple selection should behave in the collection.",name:"selectionBehavior",required:!1,type:{name:"enum",value:[{value:'"replace"'},{value:'"toggle"'}]}},dragAndDropHooks:{defaultValue:null,description:"The drag and drop hooks returned by `useDragAndDrop` used to enable drag and drop behavior for the ListBox.",name:"dragAndDropHooks",required:!1,type:{name:"DragAndDropHooks"}},renderEmptyState:{defaultValue:null,description:"Provides content to display when there are no items in the list.",name:"renderEmptyState",required:!1,type:{name:"((props: ListBoxRenderProps) => ReactNode)"}},layout:{defaultValue:{value:"'stack'"},description:"Whether the items are arranged in a stack or grid.",name:"layout",required:!1,type:{name:"enum",value:[{value:'"grid"'},{value:'"stack"'}]}},children:{defaultValue:null,description:"Function that will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.",name:"children",required:!1,type:{name:'ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},labelResolver:{defaultValue:null,description:`Field to use as the item label, defaults to result of the "itemId" resolution.<br/>
If a function is provided, it will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.`,name:"labelResolver",required:!1,type:{name:'string | number | symbol | ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},idResolver:{defaultValue:null,description:`Field to use as the item id, defaults to "id".<br/>
If a function is provided, it will be called with an item as the first argument. It must return a string.`,name:"idResolver",required:!1,type:{name:"string | number | symbol | ResolverFunction<T, string>"}}}}}catch{}const Ge=({label:e,amountSelected:t,className:n})=>i.jsxs("div",{className:"flex items-center gap-2",children:[i.jsx("span",{className:S("shrink line-clamp-1 text-[--text] data-[placeholder]:text-[--placeholder] font-[--font-weight]","[&>[slot=description]]:hidden",!t&&"text-[--placeholder]",n),children:e}),!!t&&i.jsx(ie,{className:"shrink-0 bg-primary text-neutral dark:text-neutral-1000 h-5 min-w-5 px-0 justify-around",children:t})]}),E=({label:e,placeholder:t,description:n,variant:s="default",className:a,items:d,onSelectionChange:o,idResolver:l,...f})=>{const{children:u,labelResolver:p}=f,r=u?{children:u}:{labelResolver:p},[V,v]=m.useState(!1),h=m.useRef(null),[b,R]=m.useState(void 0),[F,I]=m.useState(null),q=m.useCallback(()=>{h.current&&I(h.current.offsetWidth+"px")},[h]);Q({ref:h,onResize:q});const P=m.useMemo(()=>({trigger:"Select",triggerRef:h,placement:"bottom start",style:{"--trigger-width":F}}),[h,F]),T=m.useCallback(c=>{v(c)},[]),x=m.useCallback(c=>{R(c==="all"?new Set(d.keys()):c);const $=d.filter(w=>c==="all"?!0:c.has(H(w,l)));o==null||o($)},[l,d,o]),y=m.useMemo(()=>typeof a=="object"?a:{base:a},[a]);return i.jsx(X.Provider,{value:P,children:i.jsxs("div",{"aria-label":"select",className:S(G({variant:s,className:y==null?void 0:y.base})),children:[e&&i.jsx(U,{children:e}),i.jsx(B,{ref:h,onPress:()=>v(!0),...f,children:i.jsx(Ge,{label:b!=null&&b.size&&e?e:t,amountSelected:b==null?void 0:b.size})}),n&&i.jsxs(z,{className:"flex gap-1 items-center",children:[i.jsx(J,{}),i.jsx(Z,{slot:"description",children:n})]}),i.jsx(le,{triggerRef:h,isOpen:V,onOpenChange:T,className:y==null?void 0:y.popover,children:i.jsx(ne,{items:d,idResolver:l,selectionMode:"multiple",selectedKeys:b,onSelectionChange:x,className:y==null?void 0:y.listbox,...r})})]})})};try{E.displayName="MultiSelect",E.__docgenInfo={description:"A select component that displays a collapsible list of options and allows a user to select one or more of them.\n\nBased on `React-aria-components`",displayName:"MultiSelect",props:{onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"((selectedItems: T[]) => void)"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"string | ((validation: ValidationResult) => string)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | ClassNameObject"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},name:{defaultValue:null,description:"The name of the input, used when submitting an HTML form.",name:"name",required:!1,type:{name:"string"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Temporary text that occupies the text input when it is empty.",name:"placeholder",required:!1,type:{name:"string"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the menu.",name:"defaultOpen",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"Method that is called when the open state of the menu changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: Key) => true | ValidationError | null)"}},selectedKey:{defaultValue:null,description:"The currently selected key in the collection (controlled).",name:"selectedKey",required:!1,type:{name:"Key | null"}},defaultSelectedKey:{defaultValue:null,description:"The initial selected key in the collection (uncontrolled).",name:"defaultSelectedKey",required:!1,type:{name:"Key"}},isOpen:{defaultValue:null,description:"Sets the open state of the menu.",name:"isOpen",required:!1,type:{name:"boolean"}},variant:{defaultValue:{value:"default"},description:"",name:"variant",required:!1,type:{name:'"default" | "borderless" | "contrast" | null'}},children:{defaultValue:null,description:"Function that will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.",name:"children",required:!1,type:{name:'ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},labelResolver:{defaultValue:null,description:`Field to use as the item label, defaults to result of the "itemId" resolution.<br/>
If a function is provided, it will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.`,name:"labelResolver",required:!1,type:{name:'string | number | symbol | ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},items:{defaultValue:null,description:"",name:"items",required:!0,type:{name:"T[]"}},idResolver:{defaultValue:null,description:`Field to use as the item id, defaults to "id".<br/>
If a function is provided, it will be called with an item as the first argument. It must return a string.`,name:"idResolver",required:!1,type:{name:"string | number | symbol | ResolverFunction<T, string>"}}}}}catch{}const Je=({className:e,...t})=>i.jsx(ze,{className:D(e,n=>S("line-clamp-1 text-[--text] data-[placeholder]:text-[--placeholder] font-[--font-weight]","[&>[slot=description]]:hidden",n)),...t}),M=({label:e,description:t,variant:n="default",className:s,items:a,onSelectionChange:d,idResolver:o,...l})=>{const{children:f,labelResolver:u}=l,p=f?{children:f}:{labelResolver:u},r=typeof s=="object"?s:{base:s},V=v=>{const h=a.find(b=>H(b,o)===v);d==null||d(h)};return i.jsxs(Ae,{"aria-label":"select",className:S(G({variant:n,className:r==null?void 0:r.base})),onSelectionChange:V,...l,children:[e&&i.jsx(U,{children:e}),i.jsx(B,{children:i.jsx(Je,{})}),t&&i.jsxs(z,{className:"flex gap-1 items-center",children:[i.jsx(J,{}),i.jsx(Z,{slot:"description",children:t})]}),i.jsx(le,{className:r==null?void 0:r.popover,children:i.jsx(ne,{items:a,idResolver:o,className:r==null?void 0:r.listbox,...p})})]})};try{M.displayName="SingleSelect",M.__docgenInfo={description:"A select component that displays a collapsible list of options and allows a user to select one of them.\n\nBased on `React-aria-components`",displayName:"SingleSelect",props:{onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"((selectedItem: T) => void)"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"string | ((validation: ValidationResult) => string)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | ClassNameObject"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},name:{defaultValue:null,description:"The name of the input, used when submitting an HTML form.",name:"name",required:!1,type:{name:"string"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Temporary text that occupies the text input when it is empty.",name:"placeholder",required:!1,type:{name:"string"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the menu.",name:"defaultOpen",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"Method that is called when the open state of the menu changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: Key) => true | ValidationError | null)"}},selectedKey:{defaultValue:null,description:"The currently selected key in the collection (controlled).",name:"selectedKey",required:!1,type:{name:"Key | null"}},defaultSelectedKey:{defaultValue:null,description:"The initial selected key in the collection (uncontrolled).",name:"defaultSelectedKey",required:!1,type:{name:"Key"}},isOpen:{defaultValue:null,description:"Sets the open state of the menu.",name:"isOpen",required:!1,type:{name:"boolean"}},variant:{defaultValue:{value:"default"},description:"",name:"variant",required:!1,type:{name:'"default" | "borderless" | "contrast" | null'}},children:{defaultValue:null,description:"Function that will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.",name:"children",required:!1,type:{name:'ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},labelResolver:{defaultValue:null,description:`Field to use as the item label, defaults to result of the "itemId" resolution.<br/>
If a function is provided, it will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.`,name:"labelResolver",required:!1,type:{name:'string | number | symbol | ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},items:{defaultValue:null,description:"",name:"items",required:!0,type:{name:"T[]"}},idResolver:{defaultValue:null,description:`Field to use as the item id, defaults to "id".<br/>
If a function is provided, it will be called with an item as the first argument. It must return a string.`,name:"idResolver",required:!1,type:{name:"string | number | symbol | ResolverFunction<T, string>"}}}}}catch{}const Qe=e=>e.selectionMode==="multiple",W=e=>Qe(e)?i.jsx(E,{...e}):i.jsx(M,{...e});try{W.displayName="Select",W.__docgenInfo={description:"A select component that displays a collapsible list of options and allows a user to select one of them.\n\nBased on `React-aria-components`",displayName:"Select",props:{selectionMode:{defaultValue:null,description:"",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}},onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"((selectedItem: T) => void) | ((selectedItems: T[]) => void)"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"string | ((validation: ValidationResult) => string)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | ClassNameObject"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},name:{defaultValue:null,description:"The name of the input, used when submitting an HTML form.",name:"name",required:!1,type:{name:"string"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Temporary text that occupies the text input when it is empty.",name:"placeholder",required:!1,type:{name:"string"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the menu.",name:"defaultOpen",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"Method that is called when the open state of the menu changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: Key) => true | ValidationError | null)"}},selectedKey:{defaultValue:null,description:"The currently selected key in the collection (controlled).",name:"selectedKey",required:!1,type:{name:"Key | null"}},defaultSelectedKey:{defaultValue:null,description:"The initial selected key in the collection (uncontrolled).",name:"defaultSelectedKey",required:!1,type:{name:"Key"}},isOpen:{defaultValue:null,description:"Sets the open state of the menu.",name:"isOpen",required:!1,type:{name:"boolean"}},variant:{defaultValue:null,description:"",name:"variant",required:!1,type:{name:'"default" | "borderless" | "contrast" | null'}},children:{defaultValue:null,description:"Function that will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.",name:"children",required:!1,type:{name:'ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},labelResolver:{defaultValue:null,description:`Field to use as the item label, defaults to result of the "itemId" resolution.<br/>
If a function is provided, it will be called with an item as the first argument and an object with extra props for the underlying ListBoxItem as the second argument. It must return a ReactNode.`,name:"labelResolver",required:!1,type:{name:'string | number | symbol | ResolverFunctionWithProps<T, ReactNode, Omit<ListBoxItemProps<object>, "id" | "value" | "textValue">>'}},items:{defaultValue:null,description:"",name:"items",required:!0,type:{name:"T[]"}},idResolver:{defaultValue:null,description:`Field to use as the item id, defaults to "id".<br/>
If a function is provided, it will be called with an item as the first argument. It must return a string.`,name:"idResolver",required:!1,type:{name:"string | number | symbol | ResolverFunction<T, string>"}}}}}catch{}export{W as S};
